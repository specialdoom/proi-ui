<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="437" failures="0" errors="0" time="10.826">
    <testsuite name="src/lib/alert/__tests__/alert.test.ts" timestamp="2023-03-11T12:07:42.447Z" hostname="specialdoom" tests="25" failures="0" errors="0" skipped="0" time="0.214">
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; root element &gt; should be in the document" time="0.035">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; root element &gt; should contain `proi-alert-container` class" time="0.009">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; root element &gt; should contain `success` class by default" time="0.006">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; alert element &gt; should be in the document" time="0.008">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; alert element &gt; should contain `proi-alert` class" time="0.007">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; alert icon element &gt; should be in the document" time="0.006">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; alert icon element &gt; should contain `proi-alert-icon` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; alert title element &gt; should be in the document" time="0.011">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; alert title element &gt; should contain `proi-alert-title` class" time="0.006">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `variant` property &gt; root element &gt; should contain `success` class" time="0.006">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `variant` property &gt; root element &gt; should contain `info` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `variant` property &gt; root element &gt; should contain `warning` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `variant` property &gt; root element &gt; should contain `error` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `variant` property &gt; alert icon element &gt; should contain `success` svg specific icon" time="0.01">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `variant` property &gt; alert icon element &gt; should contain `info` svg specific icon" time="0.007">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `variant` property &gt; alert icon element &gt; should contain `warning` svg specific icon" time="0.005">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `variant` property &gt; alert icon element &gt; should contain `error` svg specific icon" time="0.005">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `title` property &gt; alert title property &gt; should contain `title` value as innerText" time="0.005">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `closable` property &gt; is set to `true` &gt; alert close icon element &gt; should be in the document" time="0.01">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `closable` property &gt; is set to `true` &gt; alert close icon element &gt; should contain `proi-icon-button` class" time="0.007">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `closable` property &gt; is set to `true` &gt; alert close icon element &gt; on `click` event &gt; root element &gt; should not be in the document" time="0.015">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `closable` property &gt; is set to `false` &gt; alert close icon element &gt; should not be in the document" time="0.013">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when default `slot` &gt; is set &gt; alert description element &gt; should be in the document" time="0.008">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when default `slot` &gt; is set &gt; alert description element &gt; should contain `proi-alert-description` class" time="0.007">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when default `slot` &gt; is set &gt; alert description element &gt; should contain default `slot` content as innerHTML" time="0.006">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/avatar/__tests__/avatar.test.ts" timestamp="2023-03-11T12:07:42.456Z" hostname="specialdoom" tests="17" failures="0" errors="0" skipped="0" time="0.103">
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; root element &gt; should be in the document" time="0.019">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; root element &gt; should contain `proi-avatar` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; root element &gt; should contain `data-display` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; root element &gt; should contain `pine` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when `initials` property &gt; is set &gt; and `image` property &gt; is not set &gt; root element &gt; should contain `initials` value as innerText" time="0.004">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when `initials` property &gt; is set &gt; and `image` property &gt; is set &gt; root element &gt; should contain empty innerText" time="0.006">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when `initials` property &gt; is set &gt; and `image` property &gt; is set &gt; root element &gt; should contain `background` inline style containing image" time="0.035">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when `initials` property &gt; is not set &gt; root element &gt; should contain empty innerText" time="0">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when &apos;variant` property &gt; root element &gt; should contain `pine` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when &apos;variant` property &gt; root element &gt; should contain `flame` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when &apos;variant` property &gt; root element &gt; should contain `neutral` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when &apos;variant` property &gt; root element &gt; should contain `mikado` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when &apos;variant` property &gt; root element &gt; should contain `tufts` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when &apos;variant` property &gt; root element &gt; should contain `vivid` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when &apos;variant` property &gt; root element &gt; should contain `bright` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when `image` property &gt; is set &gt; root element &gt; should contain `background` inline style" time="0.005">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when `image` property &gt; is not set &gt; root element &gt; should not contain `background` inline style" time="0.006">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/breadcrumb/__tests__/breadcrumb-item.test.ts" timestamp="2023-03-11T12:07:42.459Z" hostname="specialdoom" tests="7" failures="0" errors="0" skipped="0" time="0.032">
        <testcase classname="src/lib/breadcrumb/__tests__/breadcrumb-item.test.ts" name="BreadcrumbItem &gt; root element &gt; should be in the document" time="0.015">
        </testcase>
        <testcase classname="src/lib/breadcrumb/__tests__/breadcrumb-item.test.ts" name="BreadcrumbItem &gt; root element &gt; should contain `proi-breadcrumb-item` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/breadcrumb/__tests__/breadcrumb-item.test.ts" name="BreadcrumbItem &gt; link element &gt; should be in the document" time="0.002">
        </testcase>
        <testcase classname="src/lib/breadcrumb/__tests__/breadcrumb-item.test.ts" name="BreadcrumbItem &gt; link element &gt; should contain `href` attribute with `href` property as value" time="0.003">
        </testcase>
        <testcase classname="src/lib/breadcrumb/__tests__/breadcrumb-item.test.ts" name="BreadcrumbItem &gt; link element &gt; should contain `text` proprety as `innerText`" time="0.003">
        </testcase>
        <testcase classname="src/lib/breadcrumb/__tests__/breadcrumb-item.test.ts" name="BreadcrumbItem &gt; when `isCurrent` property &gt; is set to `true` &gt; root element &gt; should contain `current` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/breadcrumb/__tests__/breadcrumb-item.test.ts" name="BreadcrumbItem &gt; when `isCurrent` property &gt; is set to `false` &gt; root element &gt; should not contain `current` class" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/breadcrumb/__tests__/breadcrumb.test.ts" timestamp="2023-03-11T12:07:42.460Z" hostname="specialdoom" tests="4" failures="0" errors="0" skipped="0" time="0.028">
        <testcase classname="src/lib/breadcrumb/__tests__/breadcrumb.test.ts" name="Breadcrumb &gt; root element &gt; should be in the document" time="0.017">
        </testcase>
        <testcase classname="src/lib/breadcrumb/__tests__/breadcrumb.test.ts" name="Breadcrumb &gt; breadcrumb element &gt; should be in the document" time="0.003">
        </testcase>
        <testcase classname="src/lib/breadcrumb/__tests__/breadcrumb.test.ts" name="Breadcrumb &gt; breadcrumb element &gt; should contain `proi-breadcrumb` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/breadcrumb/__tests__/breadcrumb.test.ts" name="Breadcrumb &gt; breadcrumb element &gt; should contain 2 children" time="0.003">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/backdrop/__tests__/backdrop.test.ts" timestamp="2023-03-11T12:07:42.460Z" hostname="specialdoom" tests="4" failures="0" errors="0" skipped="0" time="0.032">
        <testcase classname="src/lib/backdrop/__tests__/backdrop.test.ts" name="Backdrop &gt; when `visible` property &gt; is set to `true` &gt; root element &gt; should be in the document" time="0.016">
        </testcase>
        <testcase classname="src/lib/backdrop/__tests__/backdrop.test.ts" name="Backdrop &gt; when `visible` property &gt; is set to `true` &gt; root element &gt; should contain `proi-backdrop` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/backdrop/__tests__/backdrop.test.ts" name="Backdrop &gt; when `visible` property &gt; is set to `true` &gt; root element &gt; and default `slot` is set &gt; should contain default `slot` as innerHTML" time="0.007">
        </testcase>
        <testcase classname="src/lib/backdrop/__tests__/backdrop.test.ts" name="Backdrop &gt; when `visible` property &gt; is set to `false` &gt; root element &gt; should not be in the document" time="0.005">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/button/__tests__/button.test.ts" timestamp="2023-03-11T12:07:42.461Z" hostname="specialdoom" tests="34" failures="0" errors="0" skipped="0" time="0.085">
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; root element &gt; should be in the document" time="0.017">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; root element &gt; should contain `proi-button` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; root element &gt; should contain `primary` class by default" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should contain `primary` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `secondary` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `ghost` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `danger` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `outline` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should contain `secondary` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `primary` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `ghost` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `danger` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `outline` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should contain `ghost` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `primary` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `secondary` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `danger` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `outline` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should contain `danger` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `primary` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `secondary` class" time="0">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `ghost` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `outline` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should contain `outline` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `primary` class" time="0">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `secondary` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `ghost` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `danger` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `disabled` property &gt; is set to `true` &gt; root element &gt; should contain `disabled` attribute" time="0.004">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `disabled` property &gt; is set to `false` &gt; root element &gt; should not contain `disabled` attribute" time="0.001">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `block` property &gt; is set to `true` &gt; root element &gt; should contain `block` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `block` property &gt; is set to `false` &gt; root element &gt; should not contain `block` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when default `slot` &gt; is set &gt; root element &gt; should contain default `slot` as innerHTML" time="0.004">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when default `slot` &gt; is not set &gt; root element &gt; should contain empty string as innerHTML" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/card/__tests__/card.test.ts" timestamp="2023-03-11T12:07:42.465Z" hostname="specialdoom" tests="25" failures="0" errors="0" skipped="0" time="0.187">
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; root element &gt; should be in the document" time="0.018">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; root element &gt; should contain `proi-card` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; title element &gt; should be in the document" time="0.002">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; title element &gt; should contain `proi-card-title` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; title element &gt; should contain `title` property as innerText" time="0.002">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; description element &gt; should be in the document" time="0.002">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; description element &gt; should contain `proi-card-description` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; description element &gt; should contain `description` property as innerText" time="0.003">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `imageSrc` property &gt; is set &gt; image element &gt; should be in the document" time="0.007">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `imageSrc` property &gt; is set &gt; image element &gt; should contain `proi-card-image` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `imageSrc` property &gt; is set &gt; image element &gt; should contain `background-image` inline style" time="0.036">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `imageSrc` property &gt; is set &gt; and `imageDescription` property &gt; is set &gt; image element &gt; should contain `title` attribute with `imageDescription` property as value" time="0.003">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `imageSrc` property &gt; is set &gt; and `imageDescription` property &gt; is not set &gt; image element &gt; should contain `title` attribute with default value" time="0.005">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `imageSrc` property &gt; is not set &gt; image element &gt; should not be in the document" time="0.009">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `showAction` property &gt; is set to `true` &gt; actions container element &gt; should be in the document" time="0.008">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `showAction` property &gt; is set to `true` &gt; actions container element &gt; should contain `proi-card-actions` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `showAction` property &gt; is set to `true` &gt; actions container element &gt; should contain 1 child" time="0.004">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `showAction` property &gt; is set to `true` &gt; action button element &gt; should be in the document" time="0.006">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `showAction` property &gt; is set to `true` &gt; action button element &gt; when click event is triggered &gt; should dispatch `action` event" time="0.008">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `showAction` property &gt; is set to `true` &gt; and `actionLabel` property &gt; is set &gt; action button element &gt; should contain `actionLabel` property as innerText" time="0.004">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `showAction` property &gt; is set to `true` &gt; and `actionLabel` property &gt; is not set &gt; action button element &gt; should contain default value of `actionLabel` property as innerText" time="0.003">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `showAction` property &gt; is set to `true` &gt; and `showCancelAction` property &gt; is set to `true` &gt; cancel button element &gt; should be in the document" time="0.01">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `showAction` property &gt; is set to `true` &gt; and `showCancelAction` property &gt; is set to `true` &gt; cancel button element &gt; when click event is triggered &gt; should trigger `cancel` event" time="0.023">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `showAction` property &gt; is set to `true` &gt; and `showCancelAction` property &gt; is set to `false` &gt; cancel button element &gt; should not be in the document" time="0.006">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `showAction` property &gt; is set to `false` &gt; actions container element &gt; should not be in the document" time="0.004">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/card/__tests__/fill-card.test.ts" timestamp="2023-03-11T12:07:42.467Z" hostname="specialdoom" tests="16" failures="0" errors="0" skipped="0" time="0.064">
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; root element &gt; should be in the document" time="0.024">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; root element &gt; should contain `proi-card` class" time="0.006">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; root element &gt; should contain `data-display` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; title element &gt; should be in the document" time="0.003">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; title element &gt; should contain `proi-card-title` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; title element &gt; should contain `title` property as innerText" time="0.002">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; description element &gt; should be in the document" time="0.004">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; description element &gt; should contain `proi-card-description` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; description element &gt; should contain `description` property as innerText" time="0.004">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; when `variant` property &gt; root element &gt; should contain `pine` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; when `variant` property &gt; root element &gt; should contain `flame` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; when `variant` property &gt; root element &gt; should contain `neutral` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; when `variant` property &gt; root element &gt; should contain `mikado` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; when `variant` property &gt; root element &gt; should contain `tufts` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; when `variant` property &gt; root element &gt; should contain `vivid` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; when `variant` property &gt; root element &gt; should contain `bright` class" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/checkbox/__tests__/checkbox.test.ts" timestamp="2023-03-11T12:07:42.469Z" hostname="specialdoom" tests="22" failures="0" errors="0" skipped="0" time="0.138">
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; root element &gt; should be in the document" time="0.037">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; root element &gt; should contain `proi-checkbox-container` class" time="0.008">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; input element &gt; should be in the document" time="0.007">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; input element &gt; should contain `type` attribute with `checkbox` value" time="0.005">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; checkbox wrapper element &gt; should be in the document" time="0.007">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; checkbox wrapper element &gt; should contain `proi-checkbox-wrapper` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; checkbox element &gt; should be in the document" time="0.004">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; checkbox element &gt; should contain `proi-checkbox` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when `checked` property &gt; is set to `true` &gt; checkbox element &gt; should contain `checked` class" time="0.009">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when `checked` property &gt; is set to `true` &gt; checkbox icon element &gt; should be in the document" time="0.004">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when `checked` property &gt; is set to `false` &gt; checkbox element &gt; should not contain `checked` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when `checked` property &gt; is set to `false` &gt; checkbox icon element &gt; should not be in the document" time="0.008">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when `disabled` property &gt; is set to `true` &gt; input element &gt; should contain `disabled` attribute" time="0.002">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when `disabled` property &gt; is set to `true` &gt; checkbox element &gt; should contain `disabled` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when `disabled` property &gt; is set to `false` &gt; input element &gt; should not contain `disabled` attribute" time="0.003">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when `disabled` property &gt; is set to `false` &gt; checkbox element &gt; should not contain `disabled` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when `error` property &gt; is set to `true` &gt; checkbox element &gt; should contain `error` class" time="0.007">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when `error` property &gt; is set to `false` &gt; checkbox element &gt; should not contain `error` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when default `slot` &gt; is set &gt; checkbox label element &gt; should be in the document" time="0.004">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when default `slot` &gt; is set &gt; checkbox label element &gt; should contain default `slot` as innerHTML" time="0.005">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when default `slot` &gt; is set &gt; checkbox label element &gt; should contain `proi-checkbox-label` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when default `slot` &gt; is not set &gt; checkbox label element &gt; should not be in the document" time="0.003">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/dialog/__tests__/dialog.test.ts" timestamp="2023-03-11T12:07:42.472Z" hostname="specialdoom" tests="26" failures="0" errors="0" skipped="0" time="0.313">
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; root element &gt; should be in the document" time="0.042">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; root element &gt; should contain `proi-backdrop` class" time="0.01">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; dialog container element &gt; should be in the document" time="0.009">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; dialog container element &gt; should contain `proi-dialog-container` class" time="0.007">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; dialog element &gt; should be in the document" time="0.008">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; dialog element &gt; should contain `proi-dialog` class" time="0.007">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; dialog header element &gt; should be in the document" time="0.01">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; dialog header element &gt; should contain `proi-dialog-header` class" time="0.042">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; dialog close icon element &gt; should be in the document" time="0.011">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; dialog body element &gt; should be in the document" time="0.013">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; dialog body element &gt; should contain `proi-dialog-body` class" time="0.009">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `title` property &gt; is set &gt; dialog header element &gt; should contain inline style `justify-content` property set to `space-between`" time="0.039">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `title` property &gt; is set &gt; dialog header element &gt; should contain `title` property as innerText" time="0.007">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `title` property &gt; is not set &gt; dialog header element &gt; should contain inline style `justify-content` property set to `flex-end`" time="0.011">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `title` property &gt; is not set &gt; dialog header element &gt; should contain empty string as innerText" time="0.005">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `showActions` property &gt; is set to `true` &gt; dialog footer element &gt; should be in the document" time="0.004">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `showActions` property &gt; is set to `true` &gt; dialog footer element &gt; should contain `proi-dialog-footer` class" time="0.006">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `showActions` property &gt; is set to `true` &gt; dialog ok button element &gt; should be in the document" time="0.007">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `showActions` property &gt; is set to `true` &gt; dialog cancel button element &gt; should be in the document" time="0.005">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `showActions` property &gt; is set to `true` &gt; on ok button click &gt; should dispatch `ok` event" time="0.008">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `showActions` property &gt; is set to `true` &gt; on cancel button click &gt; should dispatch `cancel` event" time="0.006">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `showActions` property &gt; is set to `true` &gt; on close icon click &gt; should dispatch `cancel` event" time="0.004">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `showActions` property &gt; is set to `false` &gt; dialog footer element &gt; should not be in the document" time="0.013">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and default `slot` &gt; is set &gt; dialog body element &gt; should contain default `slot` as innerHTML" time="0.01">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and default `slot` &gt; is not set &gt; dialog body element &gt; should contain empty string as innerHTML" time="0.009">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `false` &gt; root element &gt; should not be in the document" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/dot/__tests__/dot.test.ts" timestamp="2023-03-11T12:07:42.475Z" hostname="specialdoom" tests="15" failures="0" errors="0" skipped="0" time="0.068">
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; root element &gt; should be present" time="0.023">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; root element &gt; should contain `proi-dot-container` class" time="0.006">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; dot element &gt; should be present" time="0.004">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; dot element &gt; should contain `proi-dot` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; dot element &gt; should contain `flame` class by default" time="0.002">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; when `variant` property &gt; dot element &gt; should contain `pine` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; when `variant` property &gt; dot element &gt; should contain `flame` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; when `variant` property &gt; dot element &gt; should contain `neutral` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; when `variant` property &gt; dot element &gt; should contain `mikado` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; when `variant` property &gt; dot element &gt; should contain `tufts` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; when `variant` property &gt; dot element &gt; should contain `vivid` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; when `variant` property &gt; dot element &gt; should contain `bright` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; when `label` property &gt; is set &gt; dot element &gt; should contain `label` as innerText" time="0.002">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; when `label` property &gt; is not set &gt; dot element &gt; should contain `label` as innerText" time="0.001">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; when `default` slot is set &gt; root element &gt; should `default` slot as innerHTML" time="0.006">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/dropdown/__tests__/dropdown.test.ts" timestamp="2023-03-11T12:07:42.476Z" hostname="specialdoom" tests="40" failures="0" errors="0" skipped="0" time="0.277">
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; root element &gt; should be in the document" time="0.029">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; root element &gt; should contain `proi-dropdown-container` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; dropdown element &gt; should be in the document" time="0.004">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; dropdown element &gt; should contain `proi-dropdown` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; dropdown element &gt; should contain `focus` class" time="0.006">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; carret up icon element &gt; should be in the document" time="0.005">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; carret up icon element &gt; should contain class `carret-up-icon`" time="0.006">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; carret down icon element &gt; should not be in the document" time="0.015">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; dropdown options wrapper &gt; should be in the document" time="0.007">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; dropdown options wrapper &gt; should contain `proi-dropdown-options-wrapper` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; dropdown options container &gt; should be in the document" time="0.005">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; dropdown options container &gt; should contain `proi-dropdown-options` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; has elements &gt; dropdown options container &gt; should contain count of options children" time="0.005">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; has elements &gt; dropdown option element &gt; should be in the document" time="0.005">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; has elements &gt; dropdown option element &gt; should contain `proi-dropdown-option` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; has elements &gt; when option `disabled` property &gt; is set to `true` &gt; dropdown option element &gt; should contain `disabled` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; has elements &gt; when option `disabled` property &gt; is set to `false` &gt; dropdown option element &gt; should not contain `disabled` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; has elements &gt; when option `value` property &gt; is equal to `value` property &gt; dropdown option element &gt; should contain `selected` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; has elements &gt; when option `value` property &gt; is different than `value` property &gt; dropdown option element &gt; should contain `selected` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; has elements &gt; on `click` event &gt; dropdown element &gt; should contain clicked value as innerText" time="0.012">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; has elements &gt; on `click` event &gt; dropdow options wrapper &gt; should not be in the document" time="0.013">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; is empty &gt; dropdown element &gt; should contain empty string as innerText" time="0.004">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; is empty &gt; dropdown element &gt; should contain `placeholder` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; is empty &gt; dropdown options container &gt; should have no children" time="0.004">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `false` &gt; dropdown element &gt; should not contain `focus` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `false` &gt; carret up icon element &gt; should not be in the document" time="0.018">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `false` &gt; carret down icon element &gt; should be in the document" time="0.007">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `false` &gt; carret down icon element &gt; should contain class `carret-down-icon`" time="0.004">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `false` &gt; dropdown options wrapper &gt; should not be in the document" time="0.005">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `placeholder` property &gt; is set &gt; and `value` property &gt; is not set &gt; dropdown element &gt; should contain `palceholder` as innerText" time="0.003">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `placeholder` property &gt; is set &gt; and `value` property &gt; is not set &gt; dropdown element &gt; should contain `justify-content` inline style with `space-between` value" time="0.041">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `placeholder` property &gt; is set &gt; and `value` property &gt; is set &gt; dropdown element &gt; should contain default `value` label as innerText" time="0.003">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `placeholder` property &gt; is set &gt; and `value` property &gt; is set &gt; dropdown element &gt; should contain `justify-content` inline style with `space-between` value" time="0.007">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `placeholder` property &gt; is not set &gt; and `value` property &gt; is not set &gt; dropdown element &gt; should contain `justify-content` inline style with `flex-end` value" time="0.006">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `placeholder` property &gt; is not set &gt; and `value` property &gt; is set &gt; dropdown element &gt; should contain default `value` label as innerText" time="0.002">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `placeholder` property &gt; is not set &gt; and `value` property &gt; is set &gt; dropdown element &gt; should contain `justify-content` inline style with `space-between` value" time="0.004">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `error` property &gt; is set to `true` &gt; dropdown element &gt; should contain `error` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `error` property &gt; is set to `false` &gt; dropdown element &gt; should not contain `error` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `disabled` property &gt; is set to `true` &gt; dropdown element &gt; should contain `disabled` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `disabled` property &gt; is set to `true` &gt; dropdown element &gt; on `click` event &gt; dropdown options wrapper &gt; should not be in the document" time="0.003">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/form-item/__tests__/form-item.test.ts" timestamp="2023-03-11T12:07:42.481Z" hostname="specialdoom" tests="14" failures="0" errors="0" skipped="0" time="0.126">
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; root element &gt; should be in the document" time="0.03">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; root element &gt; should contain `proi-form-item` class" time="0.007">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when `label` property &gt; is set &gt; label element &gt; should contain `label` property as innerText" time="0.009">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when `description` property &gt; is set &gt; description element &gt; should be in the document" time="0.005">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when `description` property &gt; is set &gt; description element &gt; should have `proi-description` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when `description` property &gt; is set &gt; description element &gt; should contain `description` property as innerText" time="0.004">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when `description` property &gt; is not set &gt; description element &gt; should not be in the document" time="0.013">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when `error` property &gt; is set &gt; error element &gt; should be in the document" time="0.005">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when `error` property &gt; is set &gt; error element &gt; should have `proi-error` class" time="0.006">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when `error` property &gt; is set &gt; error element &gt; should contain `error` property as innerText" time="0.005">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when `error` property &gt; is not set &gt; error element &gt; should not be in the document" time="0.005">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when `inline` property &gt; is set to `true` &gt; root element &gt; should not contain `proi-form-item` class" time="0.007">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when `inline` property &gt; is set to `false` &gt; root element &gt; should contain `proi-form-item` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when default `slot` &gt; is set &gt; root element &gt; should contain default `slot` in innerHTML" time="0.009">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/form-item/__tests__/inline-form-item.test.ts" timestamp="2023-03-11T12:07:42.483Z" hostname="specialdoom" tests="14" failures="0" errors="0" skipped="0" time="0.125">
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; root element &gt; should be in the document" time="0.031">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; root element &gt; should contain `proi-form-item__inline` class" time="0.007">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; label element &gt; should be present" time="0.008">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; label element &gt; should contain `proi-form-item__inline-label` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; controls container element &gt; should be present" time="0.004">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; controls container element &gt; should contain `proi-form-item__inline-control` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; control item element &gt; should be present" time="0.006">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; control item element &gt; should contain `proi-form-item__inline-control-item` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; when `label` property &gt; is set &gt; label element &gt; should contain `label` property as innerText" time="0.007">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; when `error` property &gt; is set &gt; error element &gt; should be present" time="0.005">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; when `error` property &gt; is set &gt; error element &gt; should contain `proi-error` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; when `error` property &gt; is set &gt; error element &gt; should contain `error` property as innerText" time="0.004">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; when `error` property &gt; is not set &gt; error element &gt; should not be present" time="0.016">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; when default `slot` &gt; is set &gt; control item element &gt; should contain default `slot` as innerHTML" time="0.013">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/password-input/__tests__/password-input.test.ts" timestamp="2023-03-11T12:07:42.484Z" hostname="specialdoom" tests="26" failures="0" errors="0" skipped="0" time="0.162">
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; root element &gt; should be in the document" time="0.028">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; root element &gt; should contain `proi-input-container` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; input element &gt; should be in the document" time="0.005">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; input element &gt; should contain `proi-input` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; input element &gt; should contain `type` attribute with `password` as value" time="0.003">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `placeholder` property &gt; is set &gt; input element &gt; should contain `placeholder` attribute with `placeholder` property as value" time="0.003">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `placeholder` property &gt; is not set &gt; input element &gt; should contain `placeholder` attribute with empty string as value" time="0.002">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is set &gt; root element &gt; should contain `with-value` class" time="0.01">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is set &gt; input element &gt; should contain `value` element property with `value` property as value" time="0.006">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is set &gt; show password button element &gt; should be in the document" time="0.003">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is set &gt; show password button element &gt; should contain `proi-icon` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is set &gt; show password button element &gt; when `click` event is triggered &gt; and `value` is not shown &gt; view hide icon element &gt; should be in the document" time="0.009">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is set &gt; show password button element &gt; when `click` event is triggered &gt; and `value` is not shown &gt; view icon element &gt; should not be in the document" time="0.015">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is set &gt; show password button element &gt; when `click` event is triggered &gt; and `value` is not shown &gt; input element &gt; should contain `type` attribute with `text` as value" time="0.006">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is set &gt; show password button element &gt; when `click` event is triggered &gt; and `value` is shown &gt; view hide icon element &gt; should not be in the document" time="0.011">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is set &gt; show password button element &gt; when `click` event is triggered &gt; and `value` is shown &gt; view icon element &gt; should be in the document" time="0.009">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is set &gt; show password button element &gt; when `click` event is triggered &gt; and `value` is shown &gt; input element &gt; should contain `type` attribute with `password` as value" time="0.008">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is not set &gt; root element &gt; should not contain `with-value` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is not set &gt; input element &gt; should contain `value` element property with emprty string as value" time="0.002">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is not set &gt; show password button element &gt; should not be in the document" time="0.004">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `error` property &gt; is set to `true` &gt; root element &gt; should contain `error` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `error` property &gt; is set to `false` &gt; root element &gt; should not contain `error` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `disabled` property &gt; is set to `true` &gt; root element &gt; should contain `disabled` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `disabled` property &gt; is set to `true` &gt; input element &gt; should contain `disabled` attribute" time="0.002">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `disabled` property &gt; is set to `false` &gt; root element &gt; should not contain `disabled` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `disabled` property &gt; is set to `false` &gt; input element &gt; should not contain `disabled` attribute" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/progress/__tests__/progress.test.ts" timestamp="2023-03-11T12:07:42.487Z" hostname="specialdoom" tests="17" failures="0" errors="0" skipped="0" time="0.09">
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; root element &gt; should be in the document" time="0.016">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; root element &gt; should contain `proi-progress` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; progress line element &gt; should be in the document" time="0.003">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; progress line element &gt; should contain `proi-progress-line` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `percent` property &gt; is less than 100 &gt; and `indeterminate` property &gt; is set to `false &gt; progress line element &gt; should contain inline style for `width` property" time="0.03">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `percent` property &gt; is less than 100 &gt; and `indeterminate` property &gt; is set to `true` &gt; progress line element &gt; should contain inline style for `width` property" time="0.006">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `percent` property &gt; is 100 &gt; and `indeterminate` property &gt; is set to `false &gt; progress line element &gt; should contain inline style for `width` property" time="0.005">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `percent` property &gt; is 100 &gt; and `indeterminate` property &gt; is set to `false &gt; progress line element &gt; should contain `completed` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `percent` property &gt; is 100 &gt; and `indeterminate` property &gt; is set to `true` &gt; progress line element &gt; should contain inline style for `width` property" time="0.004">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `percent` property &gt; is 0 &gt; and `indeterminate` property &gt; is set to `false &gt; progress line element &gt; should contain inline style for `width` property" time="0.004">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `percent` property &gt; is 0 &gt; and `indeterminate` property &gt; is set to `true` &gt; progress line element &gt; should contain inline style for `width` property" time="0.005">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `error` property &gt; is set to `true` &gt; progress line element &gt; should contain `error` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `error` property &gt; is set to `false` &gt; progress line element &gt; should not contain `error` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `indeterminate` property &gt; is set to `true` &gt; progress line element &gt; should contain `indeterminate` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `indeterminate` property &gt; is set to `false` &gt; progress line element &gt; should not contain `indeterminate` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `small` property &gt; is set to `true` &gt; root element &gt; should contain `small` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `small` property &gt; is set to `false` &gt; root element &gt; should not contain `small` class" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/radio/__tests__/radio.test.ts" timestamp="2023-03-11T12:07:42.489Z" hostname="specialdoom" tests="25" failures="0" errors="0" skipped="0" time="0.119">
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; root element &gt; should be in the document" time="0.023">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; root element &gt; should contain `proi-radio-container` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; input element &gt; should be in the document" time="0.005">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; input element &gt; should contain `type` attribute with `checkbox` value" time="0.004">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; radio element &gt; should be in the document" time="0.004">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; radio element &gt; should contain `proi-radio-bullet` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `value` property &gt; is set &gt; input element &gt; should contain `value` attribute with `value` property as value" time="0.007">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `value` property &gt; is set &gt; and `group` property &gt; have same value &gt; radio element &gt; should contain `checked` class" time="0.006">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `value` property &gt; is set &gt; and `group` property &gt; have same value &gt; radio icon element &gt; should be in the document" time="0.004">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `value` property &gt; is set &gt; and `group` property &gt; have same value &gt; and `disabled` property is set to `true` &gt; radio icon rect element &gt; should contain `fill` attribute with `#EFF1F3` value" time="0.002">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `value` property &gt; is set &gt; and `group` property &gt; have same value &gt; and `error` property is set to `true` &gt; radio icon rect element &gt; should contain `fill` attribute with `#EFF1F3` value" time="0.003">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `value` property &gt; is set &gt; and `group` property &gt; have same value &gt; and `disabled` and `error` properties are set to `false` &gt; radio icon rect element &gt; should contain `fill` attribute with `#479A89` value" time="0.003">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `value` property &gt; is set &gt; and `group` property &gt; have different value &gt; radio element &gt; should not contain `checked` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `value` property &gt; is set &gt; and `group` property &gt; have different value &gt; radio icon element &gt; should not be in the document" time="0.008">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `value` property &gt; is not set &gt; input element &gt; should contain `value` attribute with empty string as value" time="0.005">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `disabled` property &gt; is set to `true` &gt; input element &gt; should contain `disabled` attribute" time="0.001">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `disabled` property &gt; is set to `true` &gt; radio element &gt; should contain `disabled` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `disabled` property &gt; is set to `false` &gt; input element &gt; should not contain `disabled` attribute" time="0.003">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `disabled` property &gt; is set to `false` &gt; radio element &gt; should not contain `disabled` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `error` property &gt; is set to `true` &gt; radio element &gt; should contain `error` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `error` property &gt; is set to `false` &gt; radio element &gt; should not contain `error` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when default `slot` &gt; is set &gt; radio label element &gt; should be in the document" time="0.005">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when default `slot` &gt; is set &gt; radio label element &gt; should contain default `slot` as innerHTML" time="0.005">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when default `slot` &gt; is set &gt; radio label element &gt; should contain `proi-radio-label` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when default `slot` &gt; is not set &gt; radio label element &gt; should not be in the document" time="0.005">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/spinner/__tests__/spinner.test.ts" timestamp="2023-03-11T12:07:42.492Z" hostname="specialdoom" tests="5" failures="0" errors="0" skipped="0" time="0.064">
        <testcase classname="src/lib/spinner/__tests__/spinner.test.ts" name="Spinner &gt; root element &gt; should be in the document" time="0.025">
        </testcase>
        <testcase classname="src/lib/spinner/__tests__/spinner.test.ts" name="Spinner &gt; root element &gt; should contain `proi-spinner-container` class" time="0.007">
        </testcase>
        <testcase classname="src/lib/spinner/__tests__/spinner.test.ts" name="Spinner &gt; logo element &gt; should be in the document" time="0.007">
        </testcase>
        <testcase classname="src/lib/spinner/__tests__/spinner.test.ts" name="Spinner &gt; logo element &gt; should contain `proi-ui-logo` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/spinner/__tests__/spinner.test.ts" name="Spinner &gt; when `label` property &gt; is set &gt; root element &gt; should contain `label` as innerText" time="0.006">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/switch/__tests__/switch.test.ts" timestamp="2023-03-11T12:07:42.493Z" hostname="specialdoom" tests="22" failures="0" errors="0" skipped="0" time="0.162">
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; root element &gt; should be in the document" time="0.037">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; root element &gt; should contain `proi-switch-container` class" time="0.008">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; input element &gt; should be in the document" time="0.004">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; input element &gt; should contain `type` attribute with `checkbox` value" time="0.005">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; switch wrapper element &gt; should be in the document" time="0.006">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; switch wrapper element &gt; should contain `proi-switch-wrapper` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; switch element &gt; should be in the document" time="0.003">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; switch element &gt; should contain `proi-switch` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; switch bullet element &gt; should be in the document" time="0.005">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; switch bullet element &gt; should contain `proi-switch-bullet` class" time="0.007">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when `checked` property &gt; is set to `true` &gt; switch element &gt; should contain `checked` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when `checked` property &gt; is set to `false` &gt; switch element &gt; should not contain `checked` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when `disabled` property &gt; is set to `true` &gt; input element &gt; should contain `disabled` attribute" time="0.005">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when `disabled` property &gt; is set to `true` &gt; switch element &gt; should contain `disabled` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when `disabled` property &gt; is set to `false` &gt; input element &gt; should not contain `disabled` attribute" time="0.004">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when `disabled` property &gt; is set to `false` &gt; switch element &gt; should not contain `disabled` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when `error` property &gt; is set to `true` &gt; switch element &gt; should contain `error` class" time="0.011">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when `error` property &gt; is set to `false` &gt; switch element &gt; should not contain `error` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when default `slot` &gt; is set &gt; switch label element &gt; should be in the document" time="0.006">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when default `slot` &gt; is set &gt; switch label element &gt; should contain default `slot` as innerHTML" time="0.009">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when default `slot` &gt; is set &gt; switch label element &gt; should contain `proi-switch-label` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when default `slot` &gt; is not set &gt; switch label element &gt; should not be in the document" time="0.011">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/tags/__tests__/tag.test.ts" timestamp="2023-03-11T12:07:42.495Z" hostname="specialdoom" tests="16" failures="0" errors="0" skipped="0" time="0.046">
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; root element &gt; should be present" time="0.017">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; root element &gt; should contain `data-display` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; root element &gt; should contain `proi-tag` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `variant` property &gt; is set to `pine` &gt; root element &gt; should contain `pine` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `variant` property &gt; is set to `flame` &gt; root element &gt; should contain `flame` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `variant` property &gt; is set to `neutral` &gt; root element &gt; should contain `neutral` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `variant` property &gt; is set to `mikado` &gt; root element &gt; should contain `mikado` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `variant` property &gt; is set to `tufts` &gt; root element &gt; should contain `tufts` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `variant` property &gt; is set to `vivid` &gt; root element &gt; should contain `vivid` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `variant` property &gt; is set to `bright` &gt; root element &gt; should contain `bright` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `badge` property &gt; is set to `true` &gt; should contain `badge` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `badge` property &gt; is set to `false` &gt; should not contain `badge` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `pill` property &gt; is set to `true` &gt; should contain `pill` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `pill` property &gt; is set to `false` &gt; should not contain `pill` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `label` property &gt; is set &gt; root element &gt; should contain `label` as innerText" time="0.002">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `label` property &gt; is not set &gt; root element &gt; should contain empty string as innerText" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/text-input/__tests__/text-input.test.ts" timestamp="2023-03-11T12:07:42.497Z" hostname="specialdoom" tests="11" failures="0" errors="0" skipped="0" time="0.059">
        <testcase classname="src/lib/text-input/__tests__/text-input.test.ts" name="TextInput &gt; root element &gt; should be in the document" time="0.017">
        </testcase>
        <testcase classname="src/lib/text-input/__tests__/text-input.test.ts" name="TextInput &gt; root element &gt; should contain `proi-input` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/text-input/__tests__/text-input.test.ts" name="TextInput &gt; root element &gt; should contain `type` attribute with `text` value" time="0.003">
        </testcase>
        <testcase classname="src/lib/text-input/__tests__/text-input.test.ts" name="TextInput &gt; when `placeholder` property &gt; is set &gt; root element &gt; should contain `placeholder` attribute with `placeholder` property as value" time="0.003">
        </testcase>
        <testcase classname="src/lib/text-input/__tests__/text-input.test.ts" name="TextInput &gt; when `placeholder` property &gt; is not set &gt; root element &gt; should contain `placeholder` attribute with empty string as value" time="0.002">
        </testcase>
        <testcase classname="src/lib/text-input/__tests__/text-input.test.ts" name="TextInput &gt; when `error` property &gt; is set to `true` &gt; root element &gt; should contain `error` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/text-input/__tests__/text-input.test.ts" name="TextInput &gt; when `error` property &gt; is set to `false` &gt; root element &gt; should not contain `error` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/text-input/__tests__/text-input.test.ts" name="TextInput &gt; when `disabled` property &gt; is set to `true` &gt; root element &gt; should contain `disabled` attribute" time="0.001">
        </testcase>
        <testcase classname="src/lib/text-input/__tests__/text-input.test.ts" name="TextInput &gt; when `disabled` property &gt; is set to `false` &gt; root element &gt; should not contain `disabled` attribute" time="0.002">
        </testcase>
        <testcase classname="src/lib/text-input/__tests__/text-input.test.ts" name="TextInput &gt; on `keydown` event &gt; root element &gt; should call the callback method" time="0.003">
        </testcase>
        <testcase classname="src/lib/text-input/__tests__/text-input.test.ts" name="TextInput &gt; on `change` event &gt; root element &gt; should call the callback method" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/textarea/__tests__/textarea.test.ts" timestamp="2023-03-11T12:07:42.499Z" hostname="specialdoom" tests="12" failures="0" errors="0" skipped="0" time="0.049">
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; root element &gt; should be in the document" time="0.016">
        </testcase>
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; root element &gt; should contain `proi-textarea` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; when `placeholder` property &gt; is set &gt; root element &gt; should contain `placeholder` attribute with `placeholder` property as value" time="0.003">
        </testcase>
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; when `placeholder` property &gt; is not set &gt; root element &gt; should contain `placeholder` attribute with empty string as value" time="0.003">
        </testcase>
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; when `error` property &gt; is set to `true` &gt; root element &gt; should contain `error` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; when `error` property &gt; is set to `false` &gt; root element &gt; should not contain `error` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; when `rows` property &gt; is set &gt; root element &gt; should contain `rows` attribute with `rows` property as value" time="0.002">
        </testcase>
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; when `rows` property &gt; is not set &gt; root element &gt; should contain `rows` attribute with `4` as value" time="0.002">
        </testcase>
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; when `disabled` property &gt; is set to `true` &gt; root element &gt; should contain `disabled` attribute" time="0.004">
        </testcase>
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; when `disabled` property &gt; is set to `false` &gt; root element &gt; should not contain `disabled` attribute" time="0.002">
        </testcase>
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; on `keydown` event &gt; root element &gt; should call the callback method" time="0.004">
        </testcase>
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; on `change` event &gt; root element &gt; should call the callback method" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/toast/__tests__/toast-provider.test.ts" timestamp="2023-03-11T12:07:42.500Z" hostname="specialdoom" tests="4" failures="0" errors="0" skipped="0" time="3.042">
        <testcase classname="src/lib/toast/__tests__/toast-provider.test.ts" name="ToastProvider &gt; root element &gt; should be in the document" time="0.017">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast-provider.test.ts" name="ToastProvider &gt; root element &gt; should contain `proi-toasts-container` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast-provider.test.ts" name="ToastProvider &gt; root element &gt; when `toast` store is set &gt; should contain `1` child" time="0.012">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast-provider.test.ts" name="ToastProvider &gt; root element &gt; when `toast` store is set &gt; should be an empty dom element after 3000ms" time="3.008">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/toast/__tests__/toast.test.ts" timestamp="2023-03-11T12:07:42.501Z" hostname="specialdoom" tests="23" failures="0" errors="0" skipped="0" time="0.257">
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; root element &gt; should be in the document" time="0.045">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; root element &gt; should contain `proi-toast-container` class" time="0.011">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; root element &gt; should forward the `click` event to close icon element" time="0.018">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; root element &gt; should forward the `keyup` event to close icon element" time="0.007">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; root element &gt; should forward the `keydown` event to close icon element" time="0.008">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; root element &gt; should forward the `keypress` event to close icon element" time="0.005">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; icon element &gt; should be in the document" time="0.004">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; icon element &gt; should contain `proi-toast-icon` class" time="0.012">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; title element &gt; should be in the document" time="0.007">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; title element &gt; should contain `proi-toast-title` class" time="0.006">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; close icon element &gt; should be in the document" time="0.006">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; close icon element &gt; should contain `proi-icon-button` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; close icon element &gt; when click event is triggered &gt; should remove the root element" time="0.013">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; when `title` property is set &gt; title element &gt; should contain `title` property as innerText" time="0.006">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; when `variant` prperty &gt; is set to `success` &gt; root element &gt; should contain `success` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; when `variant` prperty &gt; is set to `error` &gt; root element &gt; should contain `error` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; when `variant` prperty &gt; is set to `warning` &gt; root element &gt; should contain `warning` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; when `variant` prperty &gt; is set to `info` &gt; root element &gt; should contain `info` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; when `variant` prperty &gt; is not set &gt; root element &gt; should contain default `success` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; when `description` property &gt; is set &gt; description element &gt; should be in the document" time="0.007">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; when `description` property &gt; is set &gt; description element &gt; should contain `proi-toast-description` class" time="0.007">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; when `description` property &gt; is set &gt; description element &gt; should contain `description` property as innerText" time="0.008">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; when `description` property &gt; is not set &gt; description element &gt; should not be in the document" time="0.015">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/toast/__tests__/utils.test.ts" timestamp="2023-03-11T12:07:42.504Z" hostname="specialdoom" tests="5" failures="0" errors="0" skipped="0" time="0.007">
        <testcase classname="src/lib/toast/__tests__/utils.test.ts" name="toast/utils &gt; send &gt; should set the toast store with sent slice" time="0.003">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/utils.test.ts" name="toast/utils &gt; error &gt; should set the toast store with an error slice containing the details sent" time="0">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/utils.test.ts" name="toast/utils &gt; success &gt; should set the toast store with an success slice containing the details sent" time="0.001">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/utils.test.ts" name="toast/utils &gt; warning &gt; should set the toast store with an warning slice containing the details sent" time="0">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/utils.test.ts" name="toast/utils &gt; info &gt; should set the toast store with an info slice containing the details sent" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/utils/__tests__/icons.test.ts" timestamp="2023-03-11T12:07:42.505Z" hostname="specialdoom" tests="4" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="src/lib/utils/__tests__/icons.test.ts" name="utils/icons &gt; getFeedbackIcon &gt; should return correct svelte component" time="0.001">
        </testcase>
        <testcase classname="src/lib/utils/__tests__/icons.test.ts" name="utils/icons &gt; getFeedbackIcon &gt; should return correct svelte component" time="0">
        </testcase>
        <testcase classname="src/lib/utils/__tests__/icons.test.ts" name="utils/icons &gt; getFeedbackIcon &gt; should return correct svelte component" time="0">
        </testcase>
        <testcase classname="src/lib/utils/__tests__/icons.test.ts" name="utils/icons &gt; getFeedbackIcon &gt; should return correct svelte component" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/utils/__tests__/string.test.ts" timestamp="2023-03-11T12:07:42.505Z" hostname="specialdoom" tests="4" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="src/lib/utils/__tests__/string.test.ts" name="capitalizeFirstLetter &gt; should return empty string if param is &quot;&quot;" time="0.001">
        </testcase>
        <testcase classname="src/lib/utils/__tests__/string.test.ts" name="capitalizeFirstLetter &gt; should return empty string if param is null" time="0">
        </testcase>
        <testcase classname="src/lib/utils/__tests__/string.test.ts" name="capitalizeFirstLetter &gt; should return empty string if param is undefined" time="0">
        </testcase>
        <testcase classname="src/lib/utils/__tests__/string.test.ts" name="capitalizeFirstLetter &gt; should return param with first letter capitalized" time="0.001">
        </testcase>
    </testsuite>
</testsuites>
<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="437" failures="0" errors="0" time="33.909">
    <testsuite name="src/lib/progress/__tests__/progress.test.ts" timestamp="2023-03-11T12:08:05.514Z" hostname="specialdoom" tests="17" failures="0" errors="0" skipped="0" time="0.127">
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; root element &gt; should be in the document" time="0.019">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; root element &gt; should contain `proi-progress` class" time="0.008">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; progress line element &gt; should be in the document" time="0.009">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; progress line element &gt; should contain `proi-progress-line` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `percent` property &gt; is less than 100 &gt; and `indeterminate` property &gt; is set to `false &gt; progress line element &gt; should contain inline style for `width` property" time="0.034">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `percent` property &gt; is less than 100 &gt; and `indeterminate` property &gt; is set to `true` &gt; progress line element &gt; should contain inline style for `width` property" time="0.006">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `percent` property &gt; is 100 &gt; and `indeterminate` property &gt; is set to `false &gt; progress line element &gt; should contain inline style for `width` property" time="0.005">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `percent` property &gt; is 100 &gt; and `indeterminate` property &gt; is set to `false &gt; progress line element &gt; should contain `completed` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `percent` property &gt; is 100 &gt; and `indeterminate` property &gt; is set to `true` &gt; progress line element &gt; should contain inline style for `width` property" time="0.007">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `percent` property &gt; is 0 &gt; and `indeterminate` property &gt; is set to `false &gt; progress line element &gt; should contain inline style for `width` property" time="0.007">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `percent` property &gt; is 0 &gt; and `indeterminate` property &gt; is set to `true` &gt; progress line element &gt; should contain inline style for `width` property" time="0.009">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `error` property &gt; is set to `true` &gt; progress line element &gt; should contain `error` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `error` property &gt; is set to `false` &gt; progress line element &gt; should not contain `error` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `indeterminate` property &gt; is set to `true` &gt; progress line element &gt; should contain `indeterminate` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `indeterminate` property &gt; is set to `false` &gt; progress line element &gt; should not contain `indeterminate` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `small` property &gt; is set to `true` &gt; root element &gt; should contain `small` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/progress/__tests__/progress.test.ts" name="Progress &gt; when `small` property &gt; is set to `false` &gt; root element &gt; should not contain `small` class" time="0.003">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/password-input/__tests__/password-input.test.ts" timestamp="2023-03-11T12:08:05.520Z" hostname="specialdoom" tests="26" failures="0" errors="0" skipped="0" time="0.18">
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; root element &gt; should be in the document" time="0.024">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; root element &gt; should contain `proi-input-container` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; input element &gt; should be in the document" time="0.007">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; input element &gt; should contain `proi-input` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; input element &gt; should contain `type` attribute with `password` as value" time="0.01">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `placeholder` property &gt; is set &gt; input element &gt; should contain `placeholder` attribute with `placeholder` property as value" time="0.003">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `placeholder` property &gt; is not set &gt; input element &gt; should contain `placeholder` attribute with empty string as value" time="0.008">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is set &gt; root element &gt; should contain `with-value` class" time="0.017">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is set &gt; input element &gt; should contain `value` element property with `value` property as value" time="0.007">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is set &gt; show password button element &gt; should be in the document" time="0.007">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is set &gt; show password button element &gt; should contain `proi-icon` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is set &gt; show password button element &gt; when `click` event is triggered &gt; and `value` is not shown &gt; view hide icon element &gt; should be in the document" time="0.013">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is set &gt; show password button element &gt; when `click` event is triggered &gt; and `value` is not shown &gt; view icon element &gt; should not be in the document" time="0.016">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is set &gt; show password button element &gt; when `click` event is triggered &gt; and `value` is not shown &gt; input element &gt; should contain `type` attribute with `text` as value" time="0.009">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is set &gt; show password button element &gt; when `click` event is triggered &gt; and `value` is shown &gt; view hide icon element &gt; should not be in the document" time="0.009">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is set &gt; show password button element &gt; when `click` event is triggered &gt; and `value` is shown &gt; view icon element &gt; should be in the document" time="0.008">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is set &gt; show password button element &gt; when `click` event is triggered &gt; and `value` is shown &gt; input element &gt; should contain `type` attribute with `password` as value" time="0.011">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is not set &gt; root element &gt; should not contain `with-value` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is not set &gt; input element &gt; should contain `value` element property with emprty string as value" time="0.001">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `value` property &gt; is not set &gt; show password button element &gt; should not be in the document" time="0.003">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `error` property &gt; is set to `true` &gt; root element &gt; should contain `error` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `error` property &gt; is set to `false` &gt; root element &gt; should not contain `error` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `disabled` property &gt; is set to `true` &gt; root element &gt; should contain `disabled` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `disabled` property &gt; is set to `true` &gt; input element &gt; should contain `disabled` attribute" time="0.001">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `disabled` property &gt; is set to `false` &gt; root element &gt; should not contain `disabled` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/password-input/__tests__/password-input.test.ts" name="PasswordInput &gt; when `disabled` property &gt; is set to `false` &gt; input element &gt; should not contain `disabled` attribute" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/dropdown/__tests__/dropdown.test.ts" timestamp="2023-03-11T12:08:05.523Z" hostname="specialdoom" tests="40" failures="0" errors="0" skipped="0" time="0.291">
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; root element &gt; should be in the document" time="0.029">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; root element &gt; should contain `proi-dropdown-container` class" time="0.007">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; dropdown element &gt; should be in the document" time="0.004">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; dropdown element &gt; should contain `proi-dropdown` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; dropdown element &gt; should contain `focus` class" time="0.007">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; carret up icon element &gt; should be in the document" time="0.004">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; carret up icon element &gt; should contain class `carret-up-icon`" time="0.004">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; carret down icon element &gt; should not be in the document" time="0.016">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; dropdown options wrapper &gt; should be in the document" time="0.006">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; dropdown options wrapper &gt; should contain `proi-dropdown-options-wrapper` class" time="0.006">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; dropdown options container &gt; should be in the document" time="0.012">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; dropdown options container &gt; should contain `proi-dropdown-options` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; has elements &gt; dropdown options container &gt; should contain count of options children" time="0.005">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; has elements &gt; dropdown option element &gt; should be in the document" time="0.006">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; has elements &gt; dropdown option element &gt; should contain `proi-dropdown-option` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; has elements &gt; when option `disabled` property &gt; is set to `true` &gt; dropdown option element &gt; should contain `disabled` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; has elements &gt; when option `disabled` property &gt; is set to `false` &gt; dropdown option element &gt; should not contain `disabled` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; has elements &gt; when option `value` property &gt; is equal to `value` property &gt; dropdown option element &gt; should contain `selected` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; has elements &gt; when option `value` property &gt; is different than `value` property &gt; dropdown option element &gt; should contain `selected` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; has elements &gt; on `click` event &gt; dropdown element &gt; should contain clicked value as innerText" time="0.006">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; has elements &gt; on `click` event &gt; dropdow options wrapper &gt; should not be in the document" time="0.004">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; is empty &gt; dropdown element &gt; should contain empty string as innerText" time="0.002">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; is empty &gt; dropdown element &gt; should contain `placeholder` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `true` &gt; and `options` property &gt; is empty &gt; dropdown options container &gt; should have no children" time="0.002">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `false` &gt; dropdown element &gt; should not contain `focus` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `false` &gt; carret up icon element &gt; should not be in the document" time="0.003">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `false` &gt; carret down icon element &gt; should be in the document" time="0.003">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `false` &gt; carret down icon element &gt; should contain class `carret-down-icon`" time="0.004">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `open` property &gt; is set to `false` &gt; dropdown options wrapper &gt; should not be in the document" time="0.005">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `placeholder` property &gt; is set &gt; and `value` property &gt; is not set &gt; dropdown element &gt; should contain `palceholder` as innerText" time="0.007">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `placeholder` property &gt; is set &gt; and `value` property &gt; is not set &gt; dropdown element &gt; should contain `justify-content` inline style with `space-between` value" time="0.053">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `placeholder` property &gt; is set &gt; and `value` property &gt; is set &gt; dropdown element &gt; should contain default `value` label as innerText" time="0.006">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `placeholder` property &gt; is set &gt; and `value` property &gt; is set &gt; dropdown element &gt; should contain `justify-content` inline style with `space-between` value" time="0.009">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `placeholder` property &gt; is not set &gt; and `value` property &gt; is not set &gt; dropdown element &gt; should contain `justify-content` inline style with `flex-end` value" time="0.007">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `placeholder` property &gt; is not set &gt; and `value` property &gt; is set &gt; dropdown element &gt; should contain default `value` label as innerText" time="0.004">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `placeholder` property &gt; is not set &gt; and `value` property &gt; is set &gt; dropdown element &gt; should contain `justify-content` inline style with `space-between` value" time="0.008">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `error` property &gt; is set to `true` &gt; dropdown element &gt; should contain `error` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `error` property &gt; is set to `false` &gt; dropdown element &gt; should not contain `error` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `disabled` property &gt; is set to `true` &gt; dropdown element &gt; should contain `disabled` class" time="0.006">
        </testcase>
        <testcase classname="src/lib/dropdown/__tests__/dropdown.test.ts" name="Dropdown &gt; when `disabled` property &gt; is set to `true` &gt; dropdown element &gt; on `click` event &gt; dropdown options wrapper &gt; should not be in the document" time="0.007">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/radio/__tests__/radio.test.ts" timestamp="2023-03-11T12:08:05.528Z" hostname="specialdoom" tests="25" failures="0" errors="0" skipped="0" time="0.106">
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; root element &gt; should be in the document" time="0.022">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; root element &gt; should contain `proi-radio-container` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; input element &gt; should be in the document" time="0.003">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; input element &gt; should contain `type` attribute with `checkbox` value" time="0.003">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; radio element &gt; should be in the document" time="0.003">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; radio element &gt; should contain `proi-radio-bullet` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `value` property &gt; is set &gt; input element &gt; should contain `value` attribute with `value` property as value" time="0.004">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `value` property &gt; is set &gt; and `group` property &gt; have same value &gt; radio element &gt; should contain `checked` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `value` property &gt; is set &gt; and `group` property &gt; have same value &gt; radio icon element &gt; should be in the document" time="0.004">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `value` property &gt; is set &gt; and `group` property &gt; have same value &gt; and `disabled` property is set to `true` &gt; radio icon rect element &gt; should contain `fill` attribute with `#EFF1F3` value" time="0.003">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `value` property &gt; is set &gt; and `group` property &gt; have same value &gt; and `error` property is set to `true` &gt; radio icon rect element &gt; should contain `fill` attribute with `#EFF1F3` value" time="0.003">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `value` property &gt; is set &gt; and `group` property &gt; have same value &gt; and `disabled` and `error` properties are set to `false` &gt; radio icon rect element &gt; should contain `fill` attribute with `#479A89` value" time="0.004">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `value` property &gt; is set &gt; and `group` property &gt; have different value &gt; radio element &gt; should not contain `checked` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `value` property &gt; is set &gt; and `group` property &gt; have different value &gt; radio icon element &gt; should not be in the document" time="0.01">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `value` property &gt; is not set &gt; input element &gt; should contain `value` attribute with empty string as value" time="0.008">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `disabled` property &gt; is set to `true` &gt; input element &gt; should contain `disabled` attribute" time="0.001">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `disabled` property &gt; is set to `true` &gt; radio element &gt; should contain `disabled` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `disabled` property &gt; is set to `false` &gt; input element &gt; should not contain `disabled` attribute" time="0.002">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `disabled` property &gt; is set to `false` &gt; radio element &gt; should not contain `disabled` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `error` property &gt; is set to `true` &gt; radio element &gt; should contain `error` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when `error` property &gt; is set to `false` &gt; radio element &gt; should not contain `error` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when default `slot` &gt; is set &gt; radio label element &gt; should be in the document" time="0.003">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when default `slot` &gt; is set &gt; radio label element &gt; should contain default `slot` as innerHTML" time="0.003">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when default `slot` &gt; is set &gt; radio label element &gt; should contain `proi-radio-label` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/radio/__tests__/radio.test.ts" name="Radio &gt; when default `slot` &gt; is not set &gt; radio label element &gt; should not be in the document" time="0.004">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/card/__tests__/card.test.ts" timestamp="2023-03-11T12:08:05.532Z" hostname="specialdoom" tests="25" failures="0" errors="0" skipped="0" time="0.168">
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; root element &gt; should be in the document" time="0.022">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; root element &gt; should contain `proi-card` class" time="0.006">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; title element &gt; should be in the document" time="0.003">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; title element &gt; should contain `proi-card-title` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; title element &gt; should contain `title` property as innerText" time="0.003">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; description element &gt; should be in the document" time="0.004">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; description element &gt; should contain `proi-card-description` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; description element &gt; should contain `description` property as innerText" time="0.002">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `imageSrc` property &gt; is set &gt; image element &gt; should be in the document" time="0.005">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `imageSrc` property &gt; is set &gt; image element &gt; should contain `proi-card-image` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `imageSrc` property &gt; is set &gt; image element &gt; should contain `background-image` inline style" time="0.032">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `imageSrc` property &gt; is set &gt; and `imageDescription` property &gt; is set &gt; image element &gt; should contain `title` attribute with `imageDescription` property as value" time="0.005">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `imageSrc` property &gt; is set &gt; and `imageDescription` property &gt; is not set &gt; image element &gt; should contain `title` attribute with default value" time="0.01">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `imageSrc` property &gt; is not set &gt; image element &gt; should not be in the document" time="0.01">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `showAction` property &gt; is set to `true` &gt; actions container element &gt; should be in the document" time="0.006">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `showAction` property &gt; is set to `true` &gt; actions container element &gt; should contain `proi-card-actions` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `showAction` property &gt; is set to `true` &gt; actions container element &gt; should contain 1 child" time="0.002">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `showAction` property &gt; is set to `true` &gt; action button element &gt; should be in the document" time="0.003">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `showAction` property &gt; is set to `true` &gt; action button element &gt; when click event is triggered &gt; should dispatch `action` event" time="0.009">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `showAction` property &gt; is set to `true` &gt; and `actionLabel` property &gt; is set &gt; action button element &gt; should contain `actionLabel` property as innerText" time="0.003">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `showAction` property &gt; is set to `true` &gt; and `actionLabel` property &gt; is not set &gt; action button element &gt; should contain default value of `actionLabel` property as innerText" time="0.002">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `showAction` property &gt; is set to `true` &gt; and `showCancelAction` property &gt; is set to `true` &gt; cancel button element &gt; should be in the document" time="0.008">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `showAction` property &gt; is set to `true` &gt; and `showCancelAction` property &gt; is set to `true` &gt; cancel button element &gt; when click event is triggered &gt; should trigger `cancel` event" time="0.007">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `showAction` property &gt; is set to `true` &gt; and `showCancelAction` property &gt; is set to `false` &gt; cancel button element &gt; should not be in the document" time="0.005">
        </testcase>
        <testcase classname="src/lib/card/__tests__/card.test.ts" name="Card &gt; when `showAction` property &gt; is set to `false` &gt; actions container element &gt; should not be in the document" time="0.004">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/dialog/__tests__/dialog.test.ts" timestamp="2023-03-11T12:08:05.535Z" hostname="specialdoom" tests="26" failures="0" errors="0" skipped="0" time="0.29">
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; root element &gt; should be in the document" time="0.038">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; root element &gt; should contain `proi-backdrop` class" time="0.009">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; dialog container element &gt; should be in the document" time="0.008">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; dialog container element &gt; should contain `proi-dialog-container` class" time="0.009">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; dialog element &gt; should be in the document" time="0.013">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; dialog element &gt; should contain `proi-dialog` class" time="0.008">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; dialog header element &gt; should be in the document" time="0.007">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; dialog header element &gt; should contain `proi-dialog-header` class" time="0.006">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; dialog close icon element &gt; should be in the document" time="0.008">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; dialog body element &gt; should be in the document" time="0.006">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; dialog body element &gt; should contain `proi-dialog-body` class" time="0.008">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `title` property &gt; is set &gt; dialog header element &gt; should contain inline style `justify-content` property set to `space-between`" time="0.031">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `title` property &gt; is set &gt; dialog header element &gt; should contain `title` property as innerText" time="0.009">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `title` property &gt; is not set &gt; dialog header element &gt; should contain inline style `justify-content` property set to `flex-end`" time="0.014">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `title` property &gt; is not set &gt; dialog header element &gt; should contain empty string as innerText" time="0.007">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `showActions` property &gt; is set to `true` &gt; dialog footer element &gt; should be in the document" time="0.006">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `showActions` property &gt; is set to `true` &gt; dialog footer element &gt; should contain `proi-dialog-footer` class" time="0.006">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `showActions` property &gt; is set to `true` &gt; dialog ok button element &gt; should be in the document" time="0.007">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `showActions` property &gt; is set to `true` &gt; dialog cancel button element &gt; should be in the document" time="0.01">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `showActions` property &gt; is set to `true` &gt; on ok button click &gt; should dispatch `ok` event" time="0.011">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `showActions` property &gt; is set to `true` &gt; on cancel button click &gt; should dispatch `cancel` event" time="0.008">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `showActions` property &gt; is set to `true` &gt; on close icon click &gt; should dispatch `cancel` event" time="0.008">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and `showActions` property &gt; is set to `false` &gt; dialog footer element &gt; should not be in the document" time="0.021">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and default `slot` &gt; is set &gt; dialog body element &gt; should contain default `slot` as innerHTML" time="0.014">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `true` &gt; and default `slot` &gt; is not set &gt; dialog body element &gt; should contain empty string as innerHTML" time="0.008">
        </testcase>
        <testcase classname="src/lib/dialog/__tests__/dialog.test.ts" name="Dialog &gt; when `visible` property &gt; is set to `false` &gt; root element &gt; should not be in the document" time="0.004">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/checkbox/__tests__/checkbox.test.ts" timestamp="2023-03-11T12:08:05.538Z" hostname="specialdoom" tests="22" failures="0" errors="0" skipped="0" time="0.131">
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; root element &gt; should be in the document" time="0.028">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; root element &gt; should contain `proi-checkbox-container` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; input element &gt; should be in the document" time="0.003">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; input element &gt; should contain `type` attribute with `checkbox` value" time="0.004">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; checkbox wrapper element &gt; should be in the document" time="0.003">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; checkbox wrapper element &gt; should contain `proi-checkbox-wrapper` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; checkbox element &gt; should be in the document" time="0.004">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; checkbox element &gt; should contain `proi-checkbox` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when `checked` property &gt; is set to `true` &gt; checkbox element &gt; should contain `checked` class" time="0.009">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when `checked` property &gt; is set to `true` &gt; checkbox icon element &gt; should be in the document" time="0.007">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when `checked` property &gt; is set to `false` &gt; checkbox element &gt; should not contain `checked` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when `checked` property &gt; is set to `false` &gt; checkbox icon element &gt; should not be in the document" time="0.012">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when `disabled` property &gt; is set to `true` &gt; input element &gt; should contain `disabled` attribute" time="0.004">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when `disabled` property &gt; is set to `true` &gt; checkbox element &gt; should contain `disabled` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when `disabled` property &gt; is set to `false` &gt; input element &gt; should not contain `disabled` attribute" time="0.003">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when `disabled` property &gt; is set to `false` &gt; checkbox element &gt; should not contain `disabled` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when `error` property &gt; is set to `true` &gt; checkbox element &gt; should contain `error` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when `error` property &gt; is set to `false` &gt; checkbox element &gt; should not contain `error` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when default `slot` &gt; is set &gt; checkbox label element &gt; should be in the document" time="0.004">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when default `slot` &gt; is set &gt; checkbox label element &gt; should contain default `slot` as innerHTML" time="0.007">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when default `slot` &gt; is set &gt; checkbox label element &gt; should contain `proi-checkbox-label` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/checkbox/__tests__/checkbox.test.ts" name="Checkbox &gt; when default `slot` &gt; is not set &gt; checkbox label element &gt; should not be in the document" time="0.005">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/toast/__tests__/toast.test.ts" timestamp="2023-03-11T12:08:05.541Z" hostname="specialdoom" tests="23" failures="0" errors="0" skipped="0" time="0.175">
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; root element &gt; should be in the document" time="0.031">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; root element &gt; should contain `proi-toast-container` class" time="0.007">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; root element &gt; should forward the `click` event to close icon element" time="0.013">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; root element &gt; should forward the `keyup` event to close icon element" time="0.006">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; root element &gt; should forward the `keydown` event to close icon element" time="0.005">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; root element &gt; should forward the `keypress` event to close icon element" time="0.006">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; icon element &gt; should be in the document" time="0.006">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; icon element &gt; should contain `proi-toast-icon` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; title element &gt; should be in the document" time="0.007">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; title element &gt; should contain `proi-toast-title` class" time="0.006">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; close icon element &gt; should be in the document" time="0.009">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; close icon element &gt; should contain `proi-icon-button` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; close icon element &gt; when click event is triggered &gt; should remove the root element" time="0.012">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; when `title` property is set &gt; title element &gt; should contain `title` property as innerText" time="0.005">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; when `variant` prperty &gt; is set to `success` &gt; root element &gt; should contain `success` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; when `variant` prperty &gt; is set to `error` &gt; root element &gt; should contain `error` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; when `variant` prperty &gt; is set to `warning` &gt; root element &gt; should contain `warning` class" time="0.006">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; when `variant` prperty &gt; is set to `info` &gt; root element &gt; should contain `info` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; when `variant` prperty &gt; is not set &gt; root element &gt; should contain default `success` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; when `description` property &gt; is set &gt; description element &gt; should be in the document" time="0.005">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; when `description` property &gt; is set &gt; description element &gt; should contain `proi-toast-description` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; when `description` property &gt; is set &gt; description element &gt; should contain `description` property as innerText" time="0.005">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast.test.ts" name="Toast &gt; when `description` property &gt; is not set &gt; description element &gt; should not be in the document" time="0.008">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/switch/__tests__/switch.test.ts" timestamp="2023-03-11T12:08:05.543Z" hostname="specialdoom" tests="22" failures="0" errors="0" skipped="0" time="0.137">
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; root element &gt; should be in the document" time="0.025">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; root element &gt; should contain `proi-switch-container` class" time="0.008">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; input element &gt; should be in the document" time="0.006">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; input element &gt; should contain `type` attribute with `checkbox` value" time="0.01">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; switch wrapper element &gt; should be in the document" time="0.008">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; switch wrapper element &gt; should contain `proi-switch-wrapper` class" time="0.01">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; switch element &gt; should be in the document" time="0.007">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; switch element &gt; should contain `proi-switch` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; switch bullet element &gt; should be in the document" time="0.006">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; switch bullet element &gt; should contain `proi-switch-bullet` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when `checked` property &gt; is set to `true` &gt; switch element &gt; should contain `checked` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when `checked` property &gt; is set to `false` &gt; switch element &gt; should not contain `checked` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when `disabled` property &gt; is set to `true` &gt; input element &gt; should contain `disabled` attribute" time="0.002">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when `disabled` property &gt; is set to `true` &gt; switch element &gt; should contain `disabled` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when `disabled` property &gt; is set to `false` &gt; input element &gt; should not contain `disabled` attribute" time="0.002">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when `disabled` property &gt; is set to `false` &gt; switch element &gt; should not contain `disabled` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when `error` property &gt; is set to `true` &gt; switch element &gt; should contain `error` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when `error` property &gt; is set to `false` &gt; switch element &gt; should not contain `error` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when default `slot` &gt; is set &gt; switch label element &gt; should be in the document" time="0.005">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when default `slot` &gt; is set &gt; switch label element &gt; should contain default `slot` as innerHTML" time="0.007">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when default `slot` &gt; is set &gt; switch label element &gt; should contain `proi-switch-label` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/switch/__tests__/switch.test.ts" name="Switch &gt; when default `slot` &gt; is not set &gt; switch label element &gt; should not be in the document" time="0.007">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/alert/__tests__/alert.test.ts" timestamp="2023-03-11T12:08:05.546Z" hostname="specialdoom" tests="25" failures="0" errors="0" skipped="0" time="0.197">
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; root element &gt; should be in the document" time="0.033">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; root element &gt; should contain `proi-alert-container` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; root element &gt; should contain `success` class by default" time="0.003">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; alert element &gt; should be in the document" time="0.004">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; alert element &gt; should contain `proi-alert` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; alert icon element &gt; should be in the document" time="0.004">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; alert icon element &gt; should contain `proi-alert-icon` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; alert title element &gt; should be in the document" time="0.008">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; alert title element &gt; should contain `proi-alert-title` class" time="0.007">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `variant` property &gt; root element &gt; should contain `success` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `variant` property &gt; root element &gt; should contain `info` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `variant` property &gt; root element &gt; should contain `warning` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `variant` property &gt; root element &gt; should contain `error` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `variant` property &gt; alert icon element &gt; should contain `success` svg specific icon" time="0.009">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `variant` property &gt; alert icon element &gt; should contain `info` svg specific icon" time="0.005">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `variant` property &gt; alert icon element &gt; should contain `warning` svg specific icon" time="0.005">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `variant` property &gt; alert icon element &gt; should contain `error` svg specific icon" time="0.004">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `title` property &gt; alert title property &gt; should contain `title` value as innerText" time="0.004">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `closable` property &gt; is set to `true` &gt; alert close icon element &gt; should be in the document" time="0.011">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `closable` property &gt; is set to `true` &gt; alert close icon element &gt; should contain `proi-icon-button` class" time="0.011">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `closable` property &gt; is set to `true` &gt; alert close icon element &gt; on `click` event &gt; root element &gt; should not be in the document" time="0.019">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when `closable` property &gt; is set to `false` &gt; alert close icon element &gt; should not be in the document" time="0.01">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when default `slot` &gt; is set &gt; alert description element &gt; should be in the document" time="0.008">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when default `slot` &gt; is set &gt; alert description element &gt; should contain `proi-alert-description` class" time="0.008">
        </testcase>
        <testcase classname="src/lib/alert/__tests__/alert.test.ts" name="Alert &gt; when default `slot` &gt; is set &gt; alert description element &gt; should contain default `slot` content as innerHTML" time="0.007">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/form-item/__tests__/form-item.test.ts" timestamp="2023-03-11T12:08:05.549Z" hostname="specialdoom" tests="14" failures="0" errors="0" skipped="0" time="0.093">
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; root element &gt; should be in the document" time="0.026">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; root element &gt; should contain `proi-form-item` class" time="0.006">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when `label` property &gt; is set &gt; label element &gt; should contain `label` property as innerText" time="0.006">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when `description` property &gt; is set &gt; description element &gt; should be in the document" time="0.006">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when `description` property &gt; is set &gt; description element &gt; should have `proi-description` class" time="0.006">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when `description` property &gt; is set &gt; description element &gt; should contain `description` property as innerText" time="0.003">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when `description` property &gt; is not set &gt; description element &gt; should not be in the document" time="0.006">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when `error` property &gt; is set &gt; error element &gt; should be in the document" time="0.002">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when `error` property &gt; is set &gt; error element &gt; should have `proi-error` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when `error` property &gt; is set &gt; error element &gt; should contain `error` property as innerText" time="0.002">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when `error` property &gt; is not set &gt; error element &gt; should not be in the document" time="0.006">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when `inline` property &gt; is set to `true` &gt; root element &gt; should not contain `proi-form-item` class" time="0.007">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when `inline` property &gt; is set to `false` &gt; root element &gt; should contain `proi-form-item` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/form-item.test.ts" name="FormItem &gt; when default `slot` &gt; is set &gt; root element &gt; should contain default `slot` in innerHTML" time="0.006">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/form-item/__tests__/inline-form-item.test.ts" timestamp="2023-03-11T12:08:05.551Z" hostname="specialdoom" tests="14" failures="0" errors="0" skipped="0" time="0.083">
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; root element &gt; should be in the document" time="0.022">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; root element &gt; should contain `proi-form-item__inline` class" time="0.006">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; label element &gt; should be present" time="0.006">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; label element &gt; should contain `proi-form-item__inline-label` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; controls container element &gt; should be present" time="0.003">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; controls container element &gt; should contain `proi-form-item__inline-control` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; control item element &gt; should be present" time="0.003">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; control item element &gt; should contain `proi-form-item__inline-control-item` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; when `label` property &gt; is set &gt; label element &gt; should contain `label` property as innerText" time="0.005">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; when `error` property &gt; is set &gt; error element &gt; should be present" time="0.005">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; when `error` property &gt; is set &gt; error element &gt; should contain `proi-error` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; when `error` property &gt; is set &gt; error element &gt; should contain `error` property as innerText" time="0.002">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; when `error` property &gt; is not set &gt; error element &gt; should not be present" time="0.01">
        </testcase>
        <testcase classname="src/lib/form-item/__tests__/inline-form-item.test.ts" name="InlineFormItem &gt; when default `slot` &gt; is set &gt; control item element &gt; should contain default `slot` as innerHTML" time="0.006">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/textarea/__tests__/textarea.test.ts" timestamp="2023-03-11T12:08:05.552Z" hostname="specialdoom" tests="12" failures="0" errors="0" skipped="0" time="0.054">
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; root element &gt; should be in the document" time="0.017">
        </testcase>
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; root element &gt; should contain `proi-textarea` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; when `placeholder` property &gt; is set &gt; root element &gt; should contain `placeholder` attribute with `placeholder` property as value" time="0.003">
        </testcase>
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; when `placeholder` property &gt; is not set &gt; root element &gt; should contain `placeholder` attribute with empty string as value" time="0.002">
        </testcase>
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; when `error` property &gt; is set to `true` &gt; root element &gt; should contain `error` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; when `error` property &gt; is set to `false` &gt; root element &gt; should not contain `error` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; when `rows` property &gt; is set &gt; root element &gt; should contain `rows` attribute with `rows` property as value" time="0.002">
        </testcase>
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; when `rows` property &gt; is not set &gt; root element &gt; should contain `rows` attribute with `4` as value" time="0.002">
        </testcase>
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; when `disabled` property &gt; is set to `true` &gt; root element &gt; should contain `disabled` attribute" time="0.004">
        </testcase>
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; when `disabled` property &gt; is set to `false` &gt; root element &gt; should not contain `disabled` attribute" time="0.002">
        </testcase>
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; on `keydown` event &gt; root element &gt; should call the callback method" time="0.005">
        </testcase>
        <testcase classname="src/lib/textarea/__tests__/textarea.test.ts" name="Textarea &gt; on `change` event &gt; root element &gt; should call the callback method" time="0.003">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/text-input/__tests__/text-input.test.ts" timestamp="2023-03-11T12:08:05.554Z" hostname="specialdoom" tests="11" failures="0" errors="0" skipped="0" time="0.053">
        <testcase classname="src/lib/text-input/__tests__/text-input.test.ts" name="TextInput &gt; root element &gt; should be in the document" time="0.019">
        </testcase>
        <testcase classname="src/lib/text-input/__tests__/text-input.test.ts" name="TextInput &gt; root element &gt; should contain `proi-input` class" time="0.005">
        </testcase>
        <testcase classname="src/lib/text-input/__tests__/text-input.test.ts" name="TextInput &gt; root element &gt; should contain `type` attribute with `text` value" time="0.005">
        </testcase>
        <testcase classname="src/lib/text-input/__tests__/text-input.test.ts" name="TextInput &gt; when `placeholder` property &gt; is set &gt; root element &gt; should contain `placeholder` attribute with `placeholder` property as value" time="0.003">
        </testcase>
        <testcase classname="src/lib/text-input/__tests__/text-input.test.ts" name="TextInput &gt; when `placeholder` property &gt; is not set &gt; root element &gt; should contain `placeholder` attribute with empty string as value" time="0.004">
        </testcase>
        <testcase classname="src/lib/text-input/__tests__/text-input.test.ts" name="TextInput &gt; when `error` property &gt; is set to `true` &gt; root element &gt; should contain `error` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/text-input/__tests__/text-input.test.ts" name="TextInput &gt; when `error` property &gt; is set to `false` &gt; root element &gt; should not contain `error` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/text-input/__tests__/text-input.test.ts" name="TextInput &gt; when `disabled` property &gt; is set to `true` &gt; root element &gt; should contain `disabled` attribute" time="0.002">
        </testcase>
        <testcase classname="src/lib/text-input/__tests__/text-input.test.ts" name="TextInput &gt; when `disabled` property &gt; is set to `false` &gt; root element &gt; should not contain `disabled` attribute" time="0.002">
        </testcase>
        <testcase classname="src/lib/text-input/__tests__/text-input.test.ts" name="TextInput &gt; on `keydown` event &gt; root element &gt; should call the callback method" time="0.004">
        </testcase>
        <testcase classname="src/lib/text-input/__tests__/text-input.test.ts" name="TextInput &gt; on `change` event &gt; root element &gt; should call the callback method" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/button/__tests__/button.test.ts" timestamp="2023-03-11T12:08:05.555Z" hostname="specialdoom" tests="34" failures="0" errors="0" skipped="0" time="0.115">
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; root element &gt; should be in the document" time="0.025">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; root element &gt; should contain `proi-button` class" time="0.007">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; root element &gt; should contain `primary` class by default" time="0.003">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should contain `primary` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `secondary` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `ghost` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `danger` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `outline` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should contain `secondary` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `primary` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `ghost` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `danger` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `outline` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should contain `ghost` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `primary` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `secondary` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `danger` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `outline` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should contain `danger` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `primary` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `secondary` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `ghost` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `outline` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should contain `outline` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `primary` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `secondary` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `ghost` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `variant` property &gt; root element &gt; should not contain `danger` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `disabled` property &gt; is set to `true` &gt; root element &gt; should contain `disabled` attribute" time="0.006">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `disabled` property &gt; is set to `false` &gt; root element &gt; should not contain `disabled` attribute" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `block` property &gt; is set to `true` &gt; root element &gt; should contain `block` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when `block` property &gt; is set to `false` &gt; root element &gt; should not contain `block` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when default `slot` &gt; is set &gt; root element &gt; should contain default `slot` as innerHTML" time="0.008">
        </testcase>
        <testcase classname="src/lib/button/__tests__/button.test.ts" name="Button &gt; when default `slot` &gt; is not set &gt; root element &gt; should contain empty string as innerHTML" time="0.003">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/avatar/__tests__/avatar.test.ts" timestamp="2023-03-11T12:08:05.559Z" hostname="specialdoom" tests="17" failures="0" errors="0" skipped="0" time="0.084">
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; root element &gt; should be in the document" time="0.014">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; root element &gt; should contain `proi-avatar` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; root element &gt; should contain `data-display` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; root element &gt; should contain `pine` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when `initials` property &gt; is set &gt; and `image` property &gt; is not set &gt; root element &gt; should contain `initials` value as innerText" time="0.002">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when `initials` property &gt; is set &gt; and `image` property &gt; is set &gt; root element &gt; should contain empty innerText" time="0.003">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when `initials` property &gt; is set &gt; and `image` property &gt; is set &gt; root element &gt; should contain `background` inline style containing image" time="0.034">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when `initials` property &gt; is not set &gt; root element &gt; should contain empty innerText" time="0">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when &apos;variant` property &gt; root element &gt; should contain `pine` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when &apos;variant` property &gt; root element &gt; should contain `flame` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when &apos;variant` property &gt; root element &gt; should contain `neutral` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when &apos;variant` property &gt; root element &gt; should contain `mikado` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when &apos;variant` property &gt; root element &gt; should contain `tufts` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when &apos;variant` property &gt; root element &gt; should contain `vivid` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when &apos;variant` property &gt; root element &gt; should contain `bright` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when `image` property &gt; is set &gt; root element &gt; should contain `background` inline style" time="0.005">
        </testcase>
        <testcase classname="src/lib/avatar/__tests__/avatar.test.ts" name="Avatar &gt; when `image` property &gt; is not set &gt; root element &gt; should not contain `background` inline style" time="0.004">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/card/__tests__/fill-card.test.ts" timestamp="2023-03-11T12:08:05.561Z" hostname="specialdoom" tests="16" failures="0" errors="0" skipped="0" time="0.06">
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; root element &gt; should be in the document" time="0.02">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; root element &gt; should contain `proi-card` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; root element &gt; should contain `data-display` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; title element &gt; should be in the document" time="0.003">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; title element &gt; should contain `proi-card-title` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; title element &gt; should contain `title` property as innerText" time="0.002">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; description element &gt; should be in the document" time="0.004">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; description element &gt; should contain `proi-card-description` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; description element &gt; should contain `description` property as innerText" time="0.004">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; when `variant` property &gt; root element &gt; should contain `pine` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; when `variant` property &gt; root element &gt; should contain `flame` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; when `variant` property &gt; root element &gt; should contain `neutral` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; when `variant` property &gt; root element &gt; should contain `mikado` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; when `variant` property &gt; root element &gt; should contain `tufts` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; when `variant` property &gt; root element &gt; should contain `vivid` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/card/__tests__/fill-card.test.ts" name="FillCard &gt; Card &gt; when `variant` property &gt; root element &gt; should contain `bright` class" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/tags/__tests__/tag.test.ts" timestamp="2023-03-11T12:08:05.563Z" hostname="specialdoom" tests="16" failures="0" errors="0" skipped="0" time="0.055">
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; root element &gt; should be present" time="0.017">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; root element &gt; should contain `data-display` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; root element &gt; should contain `proi-tag` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `variant` property &gt; is set to `pine` &gt; root element &gt; should contain `pine` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `variant` property &gt; is set to `flame` &gt; root element &gt; should contain `flame` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `variant` property &gt; is set to `neutral` &gt; root element &gt; should contain `neutral` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `variant` property &gt; is set to `mikado` &gt; root element &gt; should contain `mikado` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `variant` property &gt; is set to `tufts` &gt; root element &gt; should contain `tufts` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `variant` property &gt; is set to `vivid` &gt; root element &gt; should contain `vivid` class" time="0.004">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `variant` property &gt; is set to `bright` &gt; root element &gt; should contain `bright` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `badge` property &gt; is set to `true` &gt; should contain `badge` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `badge` property &gt; is set to `false` &gt; should not contain `badge` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `pill` property &gt; is set to `true` &gt; should contain `pill` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `pill` property &gt; is set to `false` &gt; should not contain `pill` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `label` property &gt; is set &gt; root element &gt; should contain `label` as innerText" time="0.002">
        </testcase>
        <testcase classname="src/lib/tags/__tests__/tag.test.ts" name="Tag &gt; when `label` property &gt; is not set &gt; root element &gt; should contain empty string as innerText" time="0.001">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/toast/__tests__/utils.test.ts" timestamp="2023-03-11T12:08:05.565Z" hostname="specialdoom" tests="5" failures="0" errors="0" skipped="0" time="0.004">
        <testcase classname="src/lib/toast/__tests__/utils.test.ts" name="toast/utils &gt; send &gt; should set the toast store with sent slice" time="0.001">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/utils.test.ts" name="toast/utils &gt; error &gt; should set the toast store with an error slice containing the details sent" time="0">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/utils.test.ts" name="toast/utils &gt; success &gt; should set the toast store with an success slice containing the details sent" time="0.001">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/utils.test.ts" name="toast/utils &gt; warning &gt; should set the toast store with an warning slice containing the details sent" time="0">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/utils.test.ts" name="toast/utils &gt; info &gt; should set the toast store with an info slice containing the details sent" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/dot/__tests__/dot.test.ts" timestamp="2023-03-11T12:08:05.565Z" hostname="specialdoom" tests="15" failures="0" errors="0" skipped="0" time="0.071">
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; root element &gt; should be present" time="0.028">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; root element &gt; should contain `proi-dot-container` class" time="0.007">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; dot element &gt; should be present" time="0.007">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; dot element &gt; should contain `proi-dot` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; dot element &gt; should contain `flame` class by default" time="0.002">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; when `variant` property &gt; dot element &gt; should contain `pine` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; when `variant` property &gt; dot element &gt; should contain `flame` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; when `variant` property &gt; dot element &gt; should contain `neutral` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; when `variant` property &gt; dot element &gt; should contain `mikado` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; when `variant` property &gt; dot element &gt; should contain `tufts` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; when `variant` property &gt; dot element &gt; should contain `vivid` class" time="0.001">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; when `variant` property &gt; dot element &gt; should contain `bright` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; when `label` property &gt; is set &gt; dot element &gt; should contain `label` as innerText" time="0.002">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; when `label` property &gt; is not set &gt; dot element &gt; should contain `label` as innerText" time="0.002">
        </testcase>
        <testcase classname="src/lib/dot/__tests__/dot.test.ts" name="Dot &gt; when `default` slot is set &gt; root element &gt; should `default` slot as innerHTML" time="0.006">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/breadcrumb/__tests__/breadcrumb-item.test.ts" timestamp="2023-03-11T12:08:05.567Z" hostname="specialdoom" tests="7" failures="0" errors="0" skipped="0" time="0.036">
        <testcase classname="src/lib/breadcrumb/__tests__/breadcrumb-item.test.ts" name="BreadcrumbItem &gt; root element &gt; should be in the document" time="0.02">
        </testcase>
        <testcase classname="src/lib/breadcrumb/__tests__/breadcrumb-item.test.ts" name="BreadcrumbItem &gt; root element &gt; should contain `proi-breadcrumb-item` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/breadcrumb/__tests__/breadcrumb-item.test.ts" name="BreadcrumbItem &gt; link element &gt; should be in the document" time="0.002">
        </testcase>
        <testcase classname="src/lib/breadcrumb/__tests__/breadcrumb-item.test.ts" name="BreadcrumbItem &gt; link element &gt; should contain `href` attribute with `href` property as value" time="0.002">
        </testcase>
        <testcase classname="src/lib/breadcrumb/__tests__/breadcrumb-item.test.ts" name="BreadcrumbItem &gt; link element &gt; should contain `text` proprety as `innerText`" time="0.003">
        </testcase>
        <testcase classname="src/lib/breadcrumb/__tests__/breadcrumb-item.test.ts" name="BreadcrumbItem &gt; when `isCurrent` property &gt; is set to `true` &gt; root element &gt; should contain `current` class" time="0.002">
        </testcase>
        <testcase classname="src/lib/breadcrumb/__tests__/breadcrumb-item.test.ts" name="BreadcrumbItem &gt; when `isCurrent` property &gt; is set to `false` &gt; root element &gt; should not contain `current` class" time="0.002">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/backdrop/__tests__/backdrop.test.ts" timestamp="2023-03-11T12:08:05.568Z" hostname="specialdoom" tests="4" failures="0" errors="0" skipped="0" time="0.026">
        <testcase classname="src/lib/backdrop/__tests__/backdrop.test.ts" name="Backdrop &gt; when `visible` property &gt; is set to `true` &gt; root element &gt; should be in the document" time="0.013">
        </testcase>
        <testcase classname="src/lib/backdrop/__tests__/backdrop.test.ts" name="Backdrop &gt; when `visible` property &gt; is set to `true` &gt; root element &gt; should contain `proi-backdrop` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/backdrop/__tests__/backdrop.test.ts" name="Backdrop &gt; when `visible` property &gt; is set to `true` &gt; root element &gt; and default `slot` is set &gt; should contain default `slot` as innerHTML" time="0.005">
        </testcase>
        <testcase classname="src/lib/backdrop/__tests__/backdrop.test.ts" name="Backdrop &gt; when `visible` property &gt; is set to `false` &gt; root element &gt; should not be in the document" time="0.004">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/spinner/__tests__/spinner.test.ts" timestamp="2023-03-11T12:08:05.568Z" hostname="specialdoom" tests="5" failures="0" errors="0" skipped="0" time="0.057">
        <testcase classname="src/lib/spinner/__tests__/spinner.test.ts" name="Spinner &gt; root element &gt; should be in the document" time="0.03">
        </testcase>
        <testcase classname="src/lib/spinner/__tests__/spinner.test.ts" name="Spinner &gt; root element &gt; should contain `proi-spinner-container` class" time="0.006">
        </testcase>
        <testcase classname="src/lib/spinner/__tests__/spinner.test.ts" name="Spinner &gt; logo element &gt; should be in the document" time="0.006">
        </testcase>
        <testcase classname="src/lib/spinner/__tests__/spinner.test.ts" name="Spinner &gt; logo element &gt; should contain `proi-ui-logo` class" time="0.006">
        </testcase>
        <testcase classname="src/lib/spinner/__tests__/spinner.test.ts" name="Spinner &gt; when `label` property &gt; is set &gt; root element &gt; should contain `label` as innerText" time="0.006">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/toast/__tests__/toast-provider.test.ts" timestamp="2023-03-11T12:08:05.569Z" hostname="specialdoom" tests="4" failures="0" errors="0" skipped="0" time="3.051">
        <testcase classname="src/lib/toast/__tests__/toast-provider.test.ts" name="ToastProvider &gt; root element &gt; should be in the document" time="0.018">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast-provider.test.ts" name="ToastProvider &gt; root element &gt; should contain `proi-toasts-container` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast-provider.test.ts" name="ToastProvider &gt; root element &gt; when `toast` store is set &gt; should contain `1` child" time="0.017">
        </testcase>
        <testcase classname="src/lib/toast/__tests__/toast-provider.test.ts" name="ToastProvider &gt; root element &gt; when `toast` store is set &gt; should be an empty dom element after 3000ms" time="3.011">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/utils/__tests__/string.test.ts" timestamp="2023-03-11T12:08:05.570Z" hostname="specialdoom" tests="4" failures="0" errors="0" skipped="0" time="0.002">
        <testcase classname="src/lib/utils/__tests__/string.test.ts" name="capitalizeFirstLetter &gt; should return empty string if param is &quot;&quot;" time="0.001">
        </testcase>
        <testcase classname="src/lib/utils/__tests__/string.test.ts" name="capitalizeFirstLetter &gt; should return empty string if param is null" time="0">
        </testcase>
        <testcase classname="src/lib/utils/__tests__/string.test.ts" name="capitalizeFirstLetter &gt; should return empty string if param is undefined" time="0">
        </testcase>
        <testcase classname="src/lib/utils/__tests__/string.test.ts" name="capitalizeFirstLetter &gt; should return param with first letter capitalized" time="0">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/breadcrumb/__tests__/breadcrumb.test.ts" timestamp="2023-03-11T12:08:05.570Z" hostname="specialdoom" tests="4" failures="0" errors="0" skipped="0" time="0.032">
        <testcase classname="src/lib/breadcrumb/__tests__/breadcrumb.test.ts" name="Breadcrumb &gt; root element &gt; should be in the document" time="0.021">
        </testcase>
        <testcase classname="src/lib/breadcrumb/__tests__/breadcrumb.test.ts" name="Breadcrumb &gt; breadcrumb element &gt; should be in the document" time="0.004">
        </testcase>
        <testcase classname="src/lib/breadcrumb/__tests__/breadcrumb.test.ts" name="Breadcrumb &gt; breadcrumb element &gt; should contain `proi-breadcrumb` class" time="0.003">
        </testcase>
        <testcase classname="src/lib/breadcrumb/__tests__/breadcrumb.test.ts" name="Breadcrumb &gt; breadcrumb element &gt; should contain 2 children" time="0.003">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/utils/__tests__/icons.test.ts" timestamp="2023-03-11T12:08:05.571Z" hostname="specialdoom" tests="4" failures="0" errors="0" skipped="0" time="0.003">
        <testcase classname="src/lib/utils/__tests__/icons.test.ts" name="utils/icons &gt; getFeedbackIcon &gt; should return correct svelte component" time="0.001">
        </testcase>
        <testcase classname="src/lib/utils/__tests__/icons.test.ts" name="utils/icons &gt; getFeedbackIcon &gt; should return correct svelte component" time="0">
        </testcase>
        <testcase classname="src/lib/utils/__tests__/icons.test.ts" name="utils/icons &gt; getFeedbackIcon &gt; should return correct svelte component" time="0">
        </testcase>
        <testcase classname="src/lib/utils/__tests__/icons.test.ts" name="utils/icons &gt; getFeedbackIcon &gt; should return correct svelte component" time="0">
        </testcase>
    </testsuite>
</testsuites>
